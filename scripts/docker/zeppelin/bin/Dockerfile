# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:20.04
MAINTAINER Apache Software Foundation <dev@zeppelin.apache.org>

ARG ZEPPELIN_USER_ID=3000
ARG ZEPPELIN_GROUP_ID=3000

# `Z_VERSION` will be updated by `dev/change_zeppelin_version.sh`
ENV Z_VERSION="0.9.0-preview1"

ENV LOG_TAG="[ZEPPELIN_${Z_VERSION}]:" \
    Z_HOME="/zeppelin" \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    ZEPPELIN_ADDR="0.0.0.0"

ENV DEBIAN_FRONTEND=noninteractive

RUN groupadd --gid $ZEPPELIN_GROUP_ID zeppelin \
    && useradd -ms /bin/bash -d ${Z_HOME} zeppelin --uid $ZEPPELIN_USER_ID --gid $ZEPPELIN_GROUP_ID

RUN echo "$LOG_TAG update and install basic packages" && \
    apt -y update && \
    apt install -y locales && \
    locale-gen $LANG && \
    apt install -y software-properties-common openjdk-14-jdk && \
    apt -y autoclean && \
    apt -y dist-upgrade && \
    apt-get install -y build-essential

RUN echo "$LOG_TAG install tini related packages" && \
    apt-get install -y wget curl grep sed dpkg && \
    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb

# should install conda first before numpy, matploylib since pip and python will be installed by conda
RUN echo "$LOG_TAG Install miniconda3 related packages" && \
    apt-get -y update && \
    apt-get install -y bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    build-essential \
    git mercurial subversion && \
    echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh

ENV PATH /opt/conda/bin:$PATH

RUN echo "$LOG_TAG Install python related packages" && \
    apt-get -y update && \
    apt-get install -y python-dev python3-pip && \
    apt-get install -y gfortran && \
    # numerical/algebra packages
    apt-get install -y libblas-dev libatlas-base-dev liblapack-dev && \
    # font, image
    apt-get install -y libpng-dev libfreetype6-dev libxft-dev && \
    # for tkinter
    apt-get install -y python-tk libxml2-dev libxslt-dev zlib1g-dev && \
    hash -r && \
    conda config --set always_yes yes --set changeps1 no && \
    conda update -q conda && \
    conda info -a && \
    conda config --add channels conda-forge && \
    pip install -q pycodestyle==2.5.0 && \
    pip install -q numpy==1.17.3 pandas==0.25.0 scipy==1.3.1 grpcio==1.19.0 bkzep==0.6.1 hvplot==0.5.2 protobuf==3.10.0 pandasql==0.7.3 ipython==7.8.0 matplotlib==3.0.3 ipykernel==5.1.2 jupyter_client==5.3.4 bokeh==1.3.4 panel==0.6.0 holoviews==1.12.3 seaborn==0.9.0 plotnine==0.5.1 intake==0.5.3 intake-parquet==0.2.2 altair==3.2.0 pycodestyle==2.5.0 apache_beam==2.15.0
    #pip install numpy pandas matplotlib pandasql ipython jupyter_client ipykernel bokeh ggplot grpcio bkzep parsimonious

RUN echo "$LOG_TAG Install R related packages" && \
    echo "PATH: $PATH" && \
    ls /opt/conda/bin && \
    #echo "deb http://cran.rstudio.com/bin/linux/ubuntu xenial/" | tee -a /etc/apt/sources.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
    add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' && \
    #gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 && \
    #gpg -a --export E084DAB9 | apt-key add - && \
    apt-get -y update && \
    apt-get -y --allow-unauthenticated install r-base r-base-dev && \
    R -e "install.packages('evaluate', repos = 'https://cloud.r-project.org')" && \
    R -e "install.packages('knitr', repos='http://cran.us.r-project.org')" && \
    R -e "install.packages('ggplot2', repos='http://cran.us.r-project.org')" && \
    R -e "install.packages('googleVis', repos='http://cran.us.r-project.org')" && \
    R -e "install.packages('data.table', repos='http://cran.us.r-project.org')" && \
    R -e "install.packages('IRkernel', repos = 'https://cloud.r-project.org');IRkernel::installspec()" && \
    R -e "install.packages('shiny', repos = 'https://cloud.r-project.org')" && \
    # for devtools, Rcpp
    apt-get -y install libcurl4-gnutls-dev libssl-dev && \
    R -e "install.packages('devtools', repos='http://cran.us.r-project.org')" && \
    R -e "install.packages('Rcpp', repos='http://cran.us.r-project.org')" && \
    Rscript -e "library('devtools'); library('Rcpp'); install_github('ramnathv/rCharts')"

RUN echo "$LOG_TAG Cleanup" && \
    apt-get autoclean && \
    apt-get clean

RUN R -e "if (!requireNamespace('BiocManager', quietly = TRUE)) install.packages('BiocManager')" && \
   R -e "BiocManager::install()" && \
   R -e "install.packages('readxl', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('tidyverse', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('gridExtra', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('sparklyr', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('qqman', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('mctest', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('ggfortify', repos='http://cran.us.r-project.org')" && \
   R -e "install.packages('CMplot', repos='http://cran.us.r-project.org')"

#COPY gorr /gorr
#RUN R -e "install.packages('/gorr', repos=NULL, type='source')"

RUN rm /usr/bin/python && rm /usr/bin/python3 && ln -s /opt/conda/bin/python3 /usr/bin/python && ln -s /opt/conda/bin/python3 /usr/bin/python3

#COPY zeppelin-${Z_VERSION} /zeppelin
COPY zeppelin-0.9.0-SNAPSHOT /zeppelin

#COPY commons-lang3-3.9.jar /zeppelin-${Z_VERSION}/interpreter/spark/commons-lang3-3.7.jar
#COPY commons-lang3-3.9.jar /zeppelin-${Z_VERSION}/interpreter/spark/commons-lang3-3.8.1.jar
#COPY commons-lang3-3.9.jar /zeppelin-${Z_VERSION}/interpreter/spark/commons-lang3-3.9.jar
#COPY zeppelin-${Z_VERSION}/interpreter/spark/okio-2.2.2.jar /zeppelin-${Z_VERSION}/interpreter/spark/okio-1.6.0.jar
#COPY zeppelin-${Z_VERSION}/interpreter/spark/guice-4.2.2.jar /zeppelin-${Z_VERSION}/interpreter/spark/sisu-guice-3.0.2-no_aop.jar
COPY interpreter-setting.json /zeppelin/interpreter/spark/interpreter-setting.json

#COPY gor-model-8.1-SNAPSHOT.jar /zeppelin-${Z_VERSION}/interpreter/spark/gor-model-8.1-SNAPSHOT.jar
#COPY gor-gortools-8.1-SNAPSHOT.jar /zeppelin-${Z_VERSION}/interpreter/spark/gor-gortools-8.1-SNAPSHOT.jar

#COPY hail-python.zip /zeppelin-${Z_VERSION}/interpreter/spark/pyspark/
RUN rm -rf zeppelin/interpreter/spark/netty-all-4.0.23.Final.jar
RUN rm -rf zeppelin/interpreter/spark/jersey-client-1.19.jar
RUN rm -rf zeppelin/interpreter/spark/jersey-server-1.19.jar
RUN rm -rf zeppelin/interpreter/spark/jetty-util-6.1.26.jar
RUN rm -rf zeppelin/interpreter/spark/jetty-6.1.26.jar
RUN rm -rf zeppelin/interpreter/spark/log4j-over-slf4j-1.7.30.jar
RUN rm -rf zeppelin/interpreter/spark/logback-classic-1.2.3.jar
RUN rm -rf zeppelin/interpreter/spark/logback-core-1.2.3.jar
#RUN ln -s /zeppelin-${Z_VERSION} /zeppelin
COPY gorservices-zeppelin-10.7-SNAPSHOT.jar ${Z_HOME}/interpreter/spark

#RUN echo "$LOG_TAG Download Zeppelin binary" && \
#    wget -O /tmp/zeppelin-${Z_VERSION}-bin-all.tgz http://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-all.tgz && \
#    tar -zxvf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
#    rm -rf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
#    mv /zeppelin-${Z_VERSION}-bin-all/* ${Z_HOME}/ && \
#    chown -R root:root ${Z_HOME} && \
#    mkdir -p ${Z_HOME}/logs ${Z_HOME}/run ${Z_HOME}/webapps && \
    # Allow process to edit /etc/passwd, to create a user entry for zeppelin
#    chgrp root /etc/passwd && chmod ug+rw /etc/passwd && \
    # Give access to some specific folders
#    chmod -R 775 "${Z_HOME}/logs" "${Z_HOME}/run" "${Z_HOME}/notebook" "${Z_HOME}/conf" && \
    # Allow process to create new folders (e.g. webapps)
#    chmod 775 ${Z_HOME}

#COPY 100-interpreter-spec.yaml /zeppelin/k8s/interpreter/
#COPY sm-zeppelin-10.0.0.jar /zeppelin/interpreter/spark/
#COPY shiro.ini /zeppelin/conf/
#COPY zeppelin-site.xml /zeppelin/conf/

#COPY gorservices-spark-9.6-SNAPSHOT.jar /zeppelin/interpreter/spark/
#COPY spark-repl_2.12-3.0.0-preview2.jar /zeppelin/interpreter/spark/



# RUN apt install -y rsync liblz4-dev openjdk-12-jdk-headless && \
#     update-alternatives --set java /usr/lib/jvm/java-12-openjdk-amd64/bin/java

# RUN ln -s /usr/lib/jvm/java-12-openjdk-amd64/include /usr/lib/jvm/include && \
#     ln -s /usr/lib/jvm/java-12-openjdk-amd64/lib /usr/lib/jvm/lib

# RUN git clone https://github.com/sigmarkarl/hail.git

# RUN cd hail/hail && \
#     make install-on-cluster HAIL_COMPILE_NATIVES=1 SPARK_VERSION=2.4.4

# RUN cp /usr/local/lib/python3.7/dist-packages/hail/hail-all-spark.jar /zeppelin/interpreter/spark/
# RUN update-alternatives --set java /usr/lib/jvm/java-13-openjdk-amd64/bin/java


RUN mkdir -p ${Z_HOME}/logs ${Z_HOME}/run ${Z_HOME}/webapps && \
    # Allow process to edit /etc/passwd, to create a user entry for zeppelin
    chgrp root /etc/passwd && chmod a+rw /etc/passwd && \
    # Give access to some specific folders
    chmod -R 777 "${Z_HOME}/logs" "${Z_HOME}/run" "${Z_HOME}/notebook" "${Z_HOME}/conf" && \
    # Allow process to create new folders (e.g. webapps)
    chmod 777 ${Z_HOME}

RUN chown -R zeppelin:zeppelin ${Z_HOME}/

COPY log4j.properties ${Z_HOME}/conf/

USER 3000

EXPOSE 8080

ENTRYPOINT [ "/usr/bin/tini", "--" ]
WORKDIR ${Z_HOME}
CMD ["bin/zeppelin.sh"]
