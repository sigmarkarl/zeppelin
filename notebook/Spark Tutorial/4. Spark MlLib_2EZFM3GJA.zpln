{
  "paragraphs": [
    {
      "title": "Introduction",
      "text": "%md\n\nThis is a tutorial of how to use Spark MLlib in Zeppelin, we have 2 examples in this note:\n\n* Linear regression, we generate some random data and use a linear regression to fit this data. We use bokeh here to visualize the data and the fitted model.  Besides training, we also visualize the loss value over iteration.\n* Logstic regression, we use the offical `sample_binary_classification_data` of spark as the training data. Besides training, we also visualize the loss value over iteration.\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-19 17:49:49.825",
      "config": {
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true,
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis is a tutorial of how to use Spark MLlib in Zeppelin, we have 2 examples in this note:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLinear regression, we generate some random data and use a linear regression to fit this data. We use bokeh here to visualize the data and the fitted model.  Besides training, we also visualize the loss value over iteration.\u003c/li\u003e\n\u003cli\u003eLogstic regression, we use the offical \u003ccode\u003esample_binary_classification_data\u003c/code\u003e of spark as the training data. Besides training, we also visualize the loss value over iteration.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1579424966763_-908073771",
      "id": "paragraph_1579424966763_-908073771",
      "dateCreated": "2020-01-19 17:09:26.763",
      "dateStarted": "2020-01-19 17:49:38.749",
      "dateFinished": "2020-01-19 17:49:38.760",
      "status": "FINISHED"
    },
    {
      "title": "Initialize bokeh for visualization",
      "text": "%spark.pyspark\n\n\nimport bkzep\nimport numpy as np\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\n\noutput_notebook(notebook_type\u003d\u0027zeppelin\u0027)\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:32:42.152",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n    \u003cdiv class\u003d\"bk-root\"\u003e\n        \u003ca href\u003d\"https://bokeh.pydata.org\" target\u003d\"_blank\" class\u003d\"bk-logo bk-logo-small bk-logo-notebook\"\u003e\u003c/a\u003e\n        \u003cspan id\u003d\"1001\"\u003eLoading BokehJS ...\u003c/span\u003e\n    \u003c/div\u003e\n\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript type\u003d\"text/javascript\"\u003e\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force \u003d true;\n\n  if (typeof root._bokeh_onload_callbacks \u003d\u003d\u003d \"undefined\" || force \u003d\u003d\u003d true) {\n    root._bokeh_onload_callbacks \u003d [];\n    root._bokeh_is_loading \u003d undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) \u003d\u003d\u003d \"undefined\" || force \u003d\u003d\u003d true) {\n    root._bokeh_timeout \u003d Date.now() + 5000;\n    root._bokeh_failed_load \u003d false;\n  }\n\n  var NB_LOAD_WARNING \u003d {\u0027data\u0027: {\u0027text/html\u0027:\n     \"\u003cdiv style\u003d\u0027background-color: #fdd\u0027\u003e\\n\"+\n     \"\u003cp\u003e\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"\u003c/p\u003e\\n\"+\n     \"\u003cul\u003e\\n\"+\n     \"\u003cli\u003ere-rerun `output_notebook()` to attempt to load from CDN again, or\u003c/li\u003e\\n\"+\n     \"\u003cli\u003euse INLINE resources instead, as so:\u003c/li\u003e\\n\"+\n     \"\u003c/ul\u003e\\n\"+\n     \"\u003ccode\u003e\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources\u003dINLINE)\\n\"+\n     \"\u003c/code\u003e\\n\"+\n     \"\u003c/div\u003e\"}};\n\n  function display_loaded() {\n    var el \u003d document.getElementById(\"1001\");\n    if (el !\u003d null) {\n      el.textContent \u003d \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !\u003d\u003d undefined) {\n      if (el !\u003d null) {\n        el.textContent \u003d \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() \u003c root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback !\u003d null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls \u003d\u003d null) css_urls \u003d [];\n    if (js_urls \u003d\u003d null) js_urls \u003d [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading \u003e 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls \u003d\u003d null || js_urls.length \u003d\u003d\u003d 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading \u003d css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading \u003d\u003d\u003d 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i \u003d 0; i \u003c css_urls.length; i++) {\n      var url \u003d css_urls[i];\n      const element \u003d document.createElement(\"link\");\n      element.onload \u003d on_load;\n      element.onerror \u003d on_error;\n      element.rel \u003d \"stylesheet\";\n      element.type \u003d \"text/css\";\n      element.href \u003d url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (var i \u003d 0; i \u003c js_urls.length; i++) {\n      var url \u003d js_urls[i];\n      var element \u003d document.createElement(\u0027script\u0027);\n      element.onload \u003d on_load;\n      element.onerror \u003d on_error;\n      element.async \u003d false;\n      element.src \u003d url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element \u003d document.getElementById(\"1001\");\n  if (element \u003d\u003d null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid \u00271001\u0027 but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element \u003d document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  var js_urls \u003d [\"https://cdn.pydata.org/bokeh/release/bokeh-1.3.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.3.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.3.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.3.4.min.js\"];\n  var css_urls \u003d [];\n\n  var inline_js \u003d [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n    },\n    \n    function(Bokeh) {\n      \n      document.getElementById(\"1001\").textContent \u003d \"BokehJS is loading...\";\n\n    },\n    function(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    \n    if ((root.Bokeh !\u003d\u003d undefined) || (force \u003d\u003d\u003d true)) {\n      for (var i \u003d 0; i \u003c inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }if (force \u003d\u003d\u003d true) {\n        display_loaded();\n      }} else if (Date.now() \u003c root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load \u003d true;\n    } else if (force !\u003d\u003d true) {\n      var cell \u003d $(document.getElementById(\"1001\")).parents(\u0027.cell\u0027).data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading \u003d\u003d\u003d 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637676_907388241",
      "id": "20170621-112503_896367416",
      "dateCreated": "2020-01-07 17:00:37.676",
      "dateStarted": "2020-02-06 17:32:42.158",
      "dateFinished": "2020-02-06 17:32:48.154",
      "status": "FINISHED"
    },
    {
      "title": "Generate Data",
      "text": "%spark.pyspark\n\nimport numpy as np\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\n\n\nnum \u003d 1000\nx \u003d np.linspace(0, 10, num)\ny \u003d 2 * x + np.random.normal(0,4, num)\n\np \u003d figure()\np.circle(x, y)\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:32:49.175",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  \u003cdiv class\u003d\"bk-root\" id\u003d\"5796ac13-2a0b-4818-bde3-53c6f6d63706\" data-root-id\u003d\"1002\"\u003e\u003c/div\u003e\n\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript type\u003d\"text/javascript\"\u003e(function(root) {\n  function embed_document(root) {\n    \n  var docs_json \u003d {\"5bcb0995-0594-4e13-a66c-232301b9ac8b\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1011\",\"type\":\"LinearAxis\"}],\"center\":[{\"id\":\"1015\",\"type\":\"Grid\"},{\"id\":\"1020\",\"type\":\"Grid\"}],\"left\":[{\"id\":\"1016\",\"type\":\"LinearAxis\"}],\"renderers\":[{\"id\":\"1037\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"1040\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"1027\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"1003\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"1007\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"1005\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"1009\",\"type\":\"LinearScale\"}},\"id\":\"1002\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1041\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"ticker\":{\"id\":\"1012\",\"type\":\"BasicTicker\"}},\"id\":\"1015\",\"type\":\"Grid\"},{\"attributes\":{\"formatter\":{\"id\":\"1043\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1017\",\"type\":\"BasicTicker\"}},\"id\":\"1016\",\"type\":\"LinearAxis\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1045\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1017\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1046\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"dimension\":1,\"ticker\":{\"id\":\"1017\",\"type\":\"BasicTicker\"}},\"id\":\"1020\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1047\",\"type\":\"Selection\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1035\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1021\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1022\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"source\":{\"id\":\"1034\",\"type\":\"ColumnDataSource\"}},\"id\":\"1038\",\"type\":\"CDSView\"},{\"attributes\":{\"overlay\":{\"id\":\"1045\",\"type\":\"BoxAnnotation\"}},\"id\":\"1023\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1024\",\"type\":\"SaveTool\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1036\",\"type\":\"Circle\"},{\"attributes\":{\"callback\":null,\"data\":{\"x\":{\"__ndarray__\":\"\u003d\",\"dtype\":\"float64\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"\u003d\",\"dtype\":\"float64\",\"shape\":[1000]}},\"selected\":{\"id\":\"1047\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1046\",\"type\":\"UnionRenderers\"}},\"id\":\"1034\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1025\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1043\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1026\",\"type\":\"HelpTool\"},{\"attributes\":{\"callback\":null},\"id\":\"1003\",\"type\":\"DataRange1d\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1021\",\"type\":\"PanTool\"},{\"id\":\"1022\",\"type\":\"WheelZoomTool\"},{\"id\":\"1023\",\"type\":\"BoxZoomTool\"},{\"id\":\"1024\",\"type\":\"SaveTool\"},{\"id\":\"1025\",\"type\":\"ResetTool\"},{\"id\":\"1026\",\"type\":\"HelpTool\"}]},\"id\":\"1027\",\"type\":\"Toolbar\"},{\"attributes\":{\"callback\":null},\"id\":\"1005\",\"type\":\"DataRange1d\"},{\"attributes\":{\"data_source\":{\"id\":\"1034\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1035\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1036\",\"type\":\"Circle\"},\"selection_glyph\":null,\"view\":{\"id\":\"1038\",\"type\":\"CDSView\"}},\"id\":\"1037\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1007\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1009\",\"type\":\"LinearScale\"},{\"attributes\":{\"formatter\":{\"id\":\"1041\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1012\",\"type\":\"BasicTicker\"}},\"id\":\"1011\",\"type\":\"LinearAxis\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1040\",\"type\":\"Title\"}],\"root_ids\":[\"1002\"]},\"title\":\"Bokeh Application\",\"version\":\"1.3.4\"}};\n  var render_items \u003d [{\"docid\":\"5bcb0995-0594-4e13-a66c-232301b9ac8b\",\"roots\":{\"1002\":\"5796ac13-2a0b-4818-bde3-53c6f6d63706\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !\u003d\u003d undefined) {\n    embed_document(root);\n  } else {\n    var attempts \u003d 0;\n    var timer \u003d setInterval(function(root) {\n      if (root.Bokeh !\u003d\u003d undefined) {\n        embed_document(root);\n        clearInterval(timer);\n      }\n      attempts++;\n      if (attempts \u003e 100) {\n        console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        clearInterval(timer);\n      }\n    }, 10, root)\n  }\n})(window);\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637677_-677869302",
      "id": "20170621-112549_1048642377",
      "dateCreated": "2020-01-07 17:00:37.677",
      "dateStarted": "2020-02-06 17:32:49.210",
      "dateFinished": "2020-02-06 17:32:49.446",
      "status": "FINISHED"
    },
    {
      "title": "Linear Regression",
      "text": "%spark.pyspark\n\n\nfrom pyspark.ml.regression import LinearRegression\nimport pandas as pd\nfrom pyspark.ml.linalg import DenseVector, Vectors, VectorUDT\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import UserDefinedType, StringType\n\nto_vector \u003d udf(lambda x: Vectors.dense(x), VectorUDT())\n\ndf \u003d pd.DataFrame({\u0027features\u0027: x, \u0027label\u0027: y})\ntraining \u003d spark.createDataFrame(df).withColumn(\u0027features\u0027, to_vector(\u0027features\u0027))\n\nlr \u003d LinearRegression(maxIter\u003d50, regParam\u003d0.3, elasticNetParam\u003d0.8, solver\u003d\u0027l-bfgs\u0027)\n\n# Fit the model\nlrModel \u003d lr.fit(training)\n\n# Print the coefficients and intercept for linear regression\nprint(\"Coefficients: %s\" % str(lrModel.coefficients))\nprint(\"Intercept: %s\" % str(lrModel.intercept))\n\n# Summarize the model over the training set and print out some metrics\ntrainingSummary \u003d lrModel.summary\nprint(\"numIterations: %d\" % trainingSummary.totalIterations)\nprint(\"objectiveHistory: %s\" % str(trainingSummary.objectiveHistory))\ntrainingSummary.residuals.show()\nprint(\"RMSE: %f\" % trainingSummary.rootMeanSquaredError)\nprint(\"r2: %f\" % trainingSummary.r2)\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:32:50.665",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Coefficients: [1.8614528996941055]\nIntercept: 0.7649881218726886\nnumIterations: 3\nobjectiveHistory: [0.49949999999999994, 0.4246037680574619, 0.1855160673747118]\n+-------------------+\n|          residuals|\n+-------------------+\n| 0.7273003952948311|\n|-1.0819930705271357|\n|  6.062463081770692|\n| -2.500318041753202|\n| -5.423033254038138|\n|-5.3530888966425465|\n| -8.505553026370603|\n| -4.229368966305803|\n|-2.9683254567772837|\n| -1.606198361582193|\n|  6.032275294444212|\n|  5.535026993070064|\n| 1.3462511636448973|\n| -2.623643383440469|\n|  8.609298975741039|\n| -6.188040292862718|\n| 0.3233477123234043|\n| -2.225589727068451|\n|  1.117685708682085|\n|  3.529464092699649|\n+-------------------+\nonly showing top 20 rows\n\nRMSE: 3.795707\nr2: 0.689718\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637679_-1199864234",
      "id": "20170621-120434_191947265",
      "dateCreated": "2020-01-07 17:00:37.679",
      "dateStarted": "2020-02-06 17:32:50.670",
      "dateFinished": "2020-02-06 17:32:55.588",
      "status": "FINISHED"
    },
    {
      "title": "Linear Regression",
      "text": "%spark.pyspark\n\n\np \u003d figure()\np.circle(x, y)\n\ny_predict \u003d x * lrModel.coefficients + (lrModel.intercept)\np.line(x, y_predict, color\u003d\u0027red\u0027, line_width\u003d3)\n\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:32:59.103",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  \u003cdiv class\u003d\"bk-root\" id\u003d\"2fc464e9-475f-42ee-b903-8ea913a6bf48\" data-root-id\u003d\"1093\"\u003e\u003c/div\u003e\n\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript type\u003d\"text/javascript\"\u003e(function(root) {\n  function embed_document(root) {\n    \n  var docs_json \u003d {\"9dc37edf-f381-4505-b27a-79c925d75416\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1102\",\"type\":\"LinearAxis\"}],\"center\":[{\"id\":\"1106\",\"type\":\"Grid\"},{\"id\":\"1111\",\"type\":\"Grid\"}],\"left\":[{\"id\":\"1107\",\"type\":\"LinearAxis\"}],\"renderers\":[{\"id\":\"1128\",\"type\":\"GlyphRenderer\"},{\"id\":\"1133\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"1136\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"1118\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"1094\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"1098\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"1096\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"1100\",\"type\":\"LinearScale\"}},\"id\":\"1093\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1145\",\"type\":\"Selection\"},{\"attributes\":{\"callback\":null,\"data\":{\"x\":{\"__ndarray__\":\"\u003d\",\"dtype\":\"float64\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"\u003d\",\"dtype\":\"float64\",\"shape\":[1000]}},\"selected\":{\"id\":\"1145\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1144\",\"type\":\"UnionRenderers\"}},\"id\":\"1130\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"ticker\":{\"id\":\"1103\",\"type\":\"BasicTicker\"}},\"id\":\"1106\",\"type\":\"Grid\"},{\"attributes\":{\"formatter\":{\"id\":\"1139\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1108\",\"type\":\"BasicTicker\"}},\"id\":\"1107\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1103\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1108\",\"type\":\"BasicTicker\"},{\"attributes\":{\"dimension\":1,\"ticker\":{\"id\":\"1108\",\"type\":\"BasicTicker\"}},\"id\":\"1111\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1125\",\"type\":\"ColumnDataSource\"}},\"id\":\"1129\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1113\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1144\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1136\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1142\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1112\",\"type\":\"PanTool\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1127\",\"type\":\"Circle\"},{\"attributes\":{\"formatter\":{\"id\":\"1137\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1103\",\"type\":\"BasicTicker\"}},\"id\":\"1102\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1137\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1100\",\"type\":\"LinearScale\"},{\"attributes\":{\"overlay\":{\"id\":\"1141\",\"type\":\"BoxAnnotation\"}},\"id\":\"1114\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1126\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1115\",\"type\":\"SaveTool\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1141\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1098\",\"type\":\"LinearScale\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1132\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1143\",\"type\":\"Selection\"},{\"attributes\":{\"callback\":null},\"id\":\"1096\",\"type\":\"DataRange1d\"},{\"attributes\":{\"data_source\":{\"id\":\"1125\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1126\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1127\",\"type\":\"Circle\"},\"selection_glyph\":null,\"view\":{\"id\":\"1129\",\"type\":\"CDSView\"}},\"id\":\"1128\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1139\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1112\",\"type\":\"PanTool\"},{\"id\":\"1113\",\"type\":\"WheelZoomTool\"},{\"id\":\"1114\",\"type\":\"BoxZoomTool\"},{\"id\":\"1115\",\"type\":\"SaveTool\"},{\"id\":\"1116\",\"type\":\"ResetTool\"},{\"id\":\"1117\",\"type\":\"HelpTool\"}]},\"id\":\"1118\",\"type\":\"Toolbar\"},{\"attributes\":{\"callback\":null},\"id\":\"1094\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1117\",\"type\":\"HelpTool\"},{\"attributes\":{\"line_color\":\"red\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1131\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1116\",\"type\":\"ResetTool\"},{\"attributes\":{\"source\":{\"id\":\"1130\",\"type\":\"ColumnDataSource\"}},\"id\":\"1134\",\"type\":\"CDSView\"},{\"attributes\":{\"callback\":null,\"data\":{\"x\":{\"__ndarray__\":\"\u003d\",\"dtype\":\"float64\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"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\u003d\",\"dtype\":\"float64\",\"shape\":[1000]}},\"selected\":{\"id\":\"1143\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1142\",\"type\":\"UnionRenderers\"}},\"id\":\"1125\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"data_source\":{\"id\":\"1130\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1131\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1132\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"1134\",\"type\":\"CDSView\"}},\"id\":\"1133\",\"type\":\"GlyphRenderer\"}],\"root_ids\":[\"1093\"]},\"title\":\"Bokeh Application\",\"version\":\"1.3.4\"}};\n  var render_items \u003d [{\"docid\":\"9dc37edf-f381-4505-b27a-79c925d75416\",\"roots\":{\"1093\":\"2fc464e9-475f-42ee-b903-8ea913a6bf48\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !\u003d\u003d undefined) {\n    embed_document(root);\n  } else {\n    var attempts \u003d 0;\n    var timer \u003d setInterval(function(root) {\n      if (root.Bokeh !\u003d\u003d undefined) {\n        embed_document(root);\n        clearInterval(timer);\n      }\n      attempts++;\n      if (attempts \u003e 100) {\n        console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        clearInterval(timer);\n      }\n    }, 10, root)\n  }\n})(window);\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637679_-622761908",
      "id": "20170621-120503_149885741",
      "dateCreated": "2020-01-07 17:00:37.679",
      "dateStarted": "2020-02-06 17:32:59.111",
      "dateFinished": "2020-02-06 17:32:59.348",
      "status": "FINISHED"
    },
    {
      "title": "Loss",
      "text": "%spark.pyspark\n\np \u003d figure()\ntrainingSummary.objectiveHistory\np.line(range(len(trainingSummary.objectiveHistory)), trainingSummary.objectiveHistory, color\u003d\u0027blue\u0027, line_width\u003d3)\nshow(p)\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:33:00.975",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  \u003cdiv class\u003d\"bk-root\" id\u003d\"647265e5-85b1-48fb-b0a3-31471b5412ed\" data-root-id\u003d\"1201\"\u003e\u003c/div\u003e\n\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript type\u003d\"text/javascript\"\u003e(function(root) {\n  function embed_document(root) {\n    \n  var docs_json \u003d {\"3c275376-9866-400a-9866-f1bb83b9bbae\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1210\",\"type\":\"LinearAxis\"}],\"center\":[{\"id\":\"1214\",\"type\":\"Grid\"},{\"id\":\"1219\",\"type\":\"Grid\"}],\"left\":[{\"id\":\"1215\",\"type\":\"LinearAxis\"}],\"renderers\":[{\"id\":\"1236\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"1239\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"1226\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"1202\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"1206\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"1204\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"1208\",\"type\":\"LinearScale\"}},\"id\":\"1201\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1239\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1242\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"source\":{\"id\":\"1233\",\"type\":\"ColumnDataSource\"}},\"id\":\"1237\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1246\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1220\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1240\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1233\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1234\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1235\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"1237\",\"type\":\"CDSView\"}},\"id\":\"1236\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"callback\":null},\"id\":\"1204\",\"type\":\"DataRange1d\"},{\"attributes\":{\"formatter\":{\"id\":\"1242\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1216\",\"type\":\"BasicTicker\"}},\"id\":\"1215\",\"type\":\"LinearAxis\"},{\"attributes\":{\"dimension\":1,\"ticker\":{\"id\":\"1216\",\"type\":\"BasicTicker\"}},\"id\":\"1219\",\"type\":\"Grid\"},{\"attributes\":{\"callback\":null},\"id\":\"1202\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1216\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1206\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1223\",\"type\":\"SaveTool\"},{\"attributes\":{\"formatter\":{\"id\":\"1240\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1211\",\"type\":\"BasicTicker\"}},\"id\":\"1210\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1211\",\"type\":\"BasicTicker\"},{\"attributes\":{\"ticker\":{\"id\":\"1211\",\"type\":\"BasicTicker\"}},\"id\":\"1214\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1208\",\"type\":\"LinearScale\"},{\"attributes\":{\"overlay\":{\"id\":\"1244\",\"type\":\"BoxAnnotation\"}},\"id\":\"1222\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1221\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"callback\":null,\"data\":{\"x\":[0,1,2],\"y\":[0.49949999999999994,0.4246037680574619,0.1855160673747118]},\"selected\":{\"id\":\"1246\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1245\",\"type\":\"UnionRenderers\"}},\"id\":\"1233\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1244\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1224\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1225\",\"type\":\"HelpTool\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1220\",\"type\":\"PanTool\"},{\"id\":\"1221\",\"type\":\"WheelZoomTool\"},{\"id\":\"1222\",\"type\":\"BoxZoomTool\"},{\"id\":\"1223\",\"type\":\"SaveTool\"},{\"id\":\"1224\",\"type\":\"ResetTool\"},{\"id\":\"1225\",\"type\":\"HelpTool\"}]},\"id\":\"1226\",\"type\":\"Toolbar\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1234\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1245\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1235\",\"type\":\"Line\"}],\"root_ids\":[\"1201\"]},\"title\":\"Bokeh Application\",\"version\":\"1.3.4\"}};\n  var render_items \u003d [{\"docid\":\"3c275376-9866-400a-9866-f1bb83b9bbae\",\"roots\":{\"1201\":\"647265e5-85b1-48fb-b0a3-31471b5412ed\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !\u003d\u003d undefined) {\n    embed_document(root);\n  } else {\n    var attempts \u003d 0;\n    var timer \u003d setInterval(function(root) {\n      if (root.Bokeh !\u003d\u003d undefined) {\n        embed_document(root);\n        clearInterval(timer);\n      }\n      attempts++;\n      if (attempts \u003e 100) {\n        console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        clearInterval(timer);\n      }\n    }, 10, root)\n  }\n})(window);\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637681_1726402393",
      "id": "20170621-120529_381271006",
      "dateCreated": "2020-01-07 17:00:37.681",
      "dateStarted": "2020-02-06 17:33:00.979",
      "dateFinished": "2020-02-06 17:33:01.160",
      "status": "FINISHED"
    },
    {
      "title": "Download data for logics regression",
      "text": "%sh\n\ncd /tmp\nwget https://github.com/apache/spark/raw/master/data/mllib/sample_binary_classification_data.txt\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:33:09.327",
      "config": {
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true,
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "--2020-02-06 17:33:10--  https://github.com/apache/spark/raw/master/data/mllib/sample_binary_classification_data.txt\nResolving github.com (github.com)... 52.192.72.89\nConnecting to github.com (github.com)|52.192.72.89|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/apache/spark/master/data/mllib/sample_binary_classification_data.txt [following]\n--2020-02-06 17:33:11--  https://raw.githubusercontent.com/apache/spark/master/data/mllib/sample_binary_classification_data.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 104736 (102K) [text/plain]\nSaving to: ‘sample_binary_classification_data.txt’\n\n     0K .......... .......... .......... .......... .......... 48%  135K 0s\n    50K .......... .......... .......... .......... .......... 97% 3.34M 0s\n   100K ..                                                    100% 45.6K\u003d0.4s\n\n2020-02-06 17:33:16 (265 KB/s) - ‘sample_binary_classification_data.txt’ saved [104736/104736]\n\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1579425300864_833813189",
      "id": "paragraph_1579425300864_833813189",
      "dateCreated": "2020-01-19 17:15:00.864",
      "dateStarted": "2020-02-06 17:33:09.332",
      "dateFinished": "2020-02-06 17:33:16.226",
      "status": "FINISHED"
    },
    {
      "title": "Logistic Regression",
      "text": "%spark.pyspark\n\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.classification import NaiveBayes\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DoubleType\n\n# Load data\ndataset \u003d spark.read.format(\"libsvm\").load(\"file:///tmp/sample_binary_classification_data.txt\")\ndataset \u003d dataset.randomSplit([0.7,0.3])\ntrainSet, testSet \u003d (dataset[0], dataset[1])\ntrainSet.cache()\ntestSet.cache()\n\nlr1 \u003d LogisticRegression(maxIter\u003d30, regParam\u003d0.1, elasticNetParam\u003d0.3)\n\n# Fit the model\nlrModel1 \u003d lr1.fit(trainSet)\nlrTrainingSummary1 \u003d lrModel1.summary\n\n# Obtain the objective per iteration\nobjectiveHistory1 \u003d lrTrainingSummary1.objectiveHistory\n\nevaluateSummary \u003d lrModel1.evaluate(testSet)\nevaluateSummary.areaUnderROC",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:33:38.974",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1.0"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-1775952874",
      "id": "20170621-120800_296677966",
      "dateCreated": "2020-01-07 17:00:37.682",
      "dateStarted": "2020-02-06 17:33:38.980",
      "dateFinished": "2020-02-06 17:33:41.157",
      "status": "FINISHED"
    },
    {
      "title": "Loss",
      "text": "%spark.pyspark\n\np \u003d figure()\np.line(x\u003drange(len(objectiveHistory1)), y\u003dobjectiveHistory1, color\u003d\u0027blue\u0027, line_width\u003d2, legend\u003d\u0027Loss of LR1\u0027)\n\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 17:33:45.592",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "Col1": "string",
                      "Col2": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  \u003cdiv class\u003d\"bk-root\" id\u003d\"9710f9d2-4d4a-4bd4-857b-c7ea6c849866\" data-root-id\u003d\"1392\"\u003e\u003c/div\u003e\n\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript type\u003d\"text/javascript\"\u003e(function(root) {\n  function embed_document(root) {\n    \n  var docs_json \u003d {\"657f0457-a7a8-40b7-9b69-ca6a0947d281\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1401\",\"type\":\"LinearAxis\"}],\"center\":[{\"id\":\"1405\",\"type\":\"Grid\"},{\"id\":\"1410\",\"type\":\"Grid\"},{\"id\":\"1436\",\"type\":\"Legend\"}],\"left\":[{\"id\":\"1406\",\"type\":\"LinearAxis\"}],\"renderers\":[{\"id\":\"1427\",\"type\":\"GlyphRenderer\"}],\"title\":{\"id\":\"1430\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"1417\",\"type\":\"Toolbar\"},\"x_range\":{\"id\":\"1393\",\"type\":\"DataRange1d\"},\"x_scale\":{\"id\":\"1397\",\"type\":\"LinearScale\"},\"y_range\":{\"id\":\"1395\",\"type\":\"DataRange1d\"},\"y_scale\":{\"id\":\"1399\",\"type\":\"LinearScale\"}},\"id\":\"1392\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"callback\":null,\"data\":{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\"y\":[0.6693279632926469,0.5059967151553858,0.27738760646259636,0.223155791682095,0.19881621339775923,0.18898191594293978,0.1832312467733221,0.17904025390065287,0.17477976698917175,0.17289466773495554,0.17168585997933136,0.17130241990190567,0.17105221313381488,0.17075186857516023,0.17063616741406973,0.1704663154649606,0.17037438727462603,0.17028849900689183,0.17019712001821632,0.170026879650335,0.16993640374471639,0.16979255640680632,0.16963258494050554,0.16951839126315812,0.16945526371104008,0.16936519294319188,0.1693172319787287,0.16926518744177568,0.16920579866867147,0.1690820908689785,0.1689779155788686]},\"selected\":{\"id\":\"1446\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1445\",\"type\":\"UnionRenderers\"}},\"id\":\"1424\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1431\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"label\":{\"value\":\"Loss of LR1\"},\"renderers\":[{\"id\":\"1427\",\"type\":\"GlyphRenderer\"}]},\"id\":\"1437\",\"type\":\"LegendItem\"},{\"attributes\":{\"items\":[{\"id\":\"1437\",\"type\":\"LegendItem\"}]},\"id\":\"1436\",\"type\":\"Legend\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1435\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1446\",\"type\":\"Selection\"},{\"attributes\":{\"formatter\":{\"id\":\"1431\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1402\",\"type\":\"BasicTicker\"}},\"id\":\"1401\",\"type\":\"LinearAxis\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1426\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1445\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"callback\":null},\"id\":\"1395\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1433\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1397\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1415\",\"type\":\"ResetTool\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1430\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1399\",\"type\":\"LinearScale\"},{\"attributes\":{\"callback\":null},\"id\":\"1393\",\"type\":\"DataRange1d\"},{\"attributes\":{\"source\":{\"id\":\"1424\",\"type\":\"ColumnDataSource\"}},\"id\":\"1428\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1416\",\"type\":\"HelpTool\"},{\"attributes\":{\"formatter\":{\"id\":\"1433\",\"type\":\"BasicTickFormatter\"},\"ticker\":{\"id\":\"1407\",\"type\":\"BasicTicker\"}},\"id\":\"1406\",\"type\":\"LinearAxis\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1411\",\"type\":\"PanTool\"},{\"id\":\"1412\",\"type\":\"WheelZoomTool\"},{\"id\":\"1413\",\"type\":\"BoxZoomTool\"},{\"id\":\"1414\",\"type\":\"SaveTool\"},{\"id\":\"1415\",\"type\":\"ResetTool\"},{\"id\":\"1416\",\"type\":\"HelpTool\"}]},\"id\":\"1417\",\"type\":\"Toolbar\"},{\"attributes\":{\"ticker\":{\"id\":\"1402\",\"type\":\"BasicTicker\"}},\"id\":\"1405\",\"type\":\"Grid\"},{\"attributes\":{\"data_source\":{\"id\":\"1424\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1425\",\"type\":\"Line\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1426\",\"type\":\"Line\"},\"selection_glyph\":null,\"view\":{\"id\":\"1428\",\"type\":\"CDSView\"}},\"id\":\"1427\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1402\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1412\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1414\",\"type\":\"SaveTool\"},{\"attributes\":{\"dimension\":1,\"ticker\":{\"id\":\"1407\",\"type\":\"BasicTicker\"}},\"id\":\"1410\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1407\",\"type\":\"BasicTicker\"},{\"attributes\":{\"overlay\":{\"id\":\"1435\",\"type\":\"BoxAnnotation\"}},\"id\":\"1413\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1425\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1411\",\"type\":\"PanTool\"}],\"root_ids\":[\"1392\"]},\"title\":\"Bokeh Application\",\"version\":\"1.3.4\"}};\n  var render_items \u003d [{\"docid\":\"657f0457-a7a8-40b7-9b69-ca6a0947d281\",\"roots\":{\"1392\":\"9710f9d2-4d4a-4bd4-857b-c7ea6c849866\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !\u003d\u003d undefined) {\n    embed_document(root);\n  } else {\n    var attempts \u003d 0;\n    var timer \u003d setInterval(function(root) {\n      if (root.Bokeh !\u003d\u003d undefined) {\n        embed_document(root);\n        clearInterval(timer);\n      }\n      attempts++;\n      if (attempts \u003e 100) {\n        console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        clearInterval(timer);\n      }\n    }, 10, root)\n  }\n})(window);\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-1012332713",
      "id": "20170621-121651_569823333",
      "dateCreated": "2020-01-07 17:00:37.682",
      "dateStarted": "2020-02-06 17:33:45.597",
      "dateFinished": "2020-02-06 17:33:45.769",
      "status": "FINISHED"
    },
    {
      "title": "",
      "text": "%spark.pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-07 17:00:37.682",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-181840828",
      "id": "20170621-155011_1790753917",
      "dateCreated": "2020-01-07 17:00:37.682",
      "status": "READY"
    }
  ],
  "name": "Spark MlLib",
  "id": "2EZFM3GJA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "permissions": {
    "owners": [],
    "runners": [],
    "readers": [],
    "writers": []
  },
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": true
  },
  "info": {},
  "path": "/Spark Tutorial/Spark MlLib"
}